/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./cartridges/int_adyen_SFRA/cartridge/client/default/js/adyenCheckout.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./cartridges/int_adyen_SFRA/cartridge/client/default/js/adyenCheckout.js":
/*!********************************************************************************!*\
  !*** ./cartridges/int_adyen_SFRA/cartridge/client/default/js/adyenCheckout.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n// eslint-disable-next-line no-unused-vars\nvar maskedCardNumber;\nvar MASKED_CC_PREFIX = '************';\nvar selectedMethod;\nvar componentsObj = {};\nvar checkoutConfiguration = window.Configuration;\nvar formErrorsExist;\nvar isValid = false;\nvar checkout;\n$('#dwfrm_billing').submit(function (e) {\n  e.preventDefault();\n  var form = $(this);\n  var url = form.attr('action');\n  $.ajax({\n    type: 'POST',\n    url: url,\n    data: form.serialize(),\n    async: false,\n    success: function success(data) {\n      formErrorsExist = 'fieldErrors' in data;\n    }\n  });\n});\n\ncheckoutConfiguration.onChange = function (state) {\n  var type = state.data.paymentMethod.type;\n  isValid = state.isValid;\n\n  if (!componentsObj[type]) {\n    componentsObj[type] = {};\n  }\n\n  componentsObj[type].isValid = isValid;\n  componentsObj[type].stateData = state.data;\n};\n\ncheckoutConfiguration.showPayButton = false;\ncheckoutConfiguration.paymentMethodsConfiguration = {\n  card: {\n    enableStoreDetails: showStoreDetails,\n    onBrand: function onBrand(brandObject) {\n      document.querySelector('#cardType').value = brandObject.brand;\n    },\n    onFieldValid: function onFieldValid(data) {\n      if (data.endDigits) {\n        maskedCardNumber = MASKED_CC_PREFIX + data.endDigits;\n        document.querySelector('#cardNumber').value = maskedCardNumber;\n      }\n    },\n    onChange: function onChange(state) {\n      isValid = state.isValid;\n      var componentName = state.data.paymentMethod.storedPaymentMethodId ? \"storedCard\".concat(state.data.paymentMethod.storedPaymentMethodId) : state.data.paymentMethod.type;\n\n      if (componentName === selectedMethod || selectedMethod === 'bcmc') {\n        componentsObj[selectedMethod].isValid = isValid;\n        componentsObj[selectedMethod].stateData = state.data;\n      }\n    }\n  },\n  boletobancario: {\n    personalDetailsRequired: true,\n    // turn personalDetails section on/off\n    billingAddressRequired: false,\n    // turn billingAddress section on/off\n    showEmailAddress: false,\n    // allow shopper to specify their email address\n    // Optionally prefill some fields, here all fields are filled:\n    data: {\n      firstName: document.getElementById('shippingFirstNamedefault').value,\n      lastName: document.getElementById('shippingLastNamedefault').value\n    }\n  },\n  paywithgoogle: {\n    environment: window.Configuration.environment,\n    onSubmit: () => {\n      assignPaymentMethodValue();\n      document.querySelector('button[value=\"submit-payment\"]').disabled = false;\n      document.querySelector('button[value=\"submit-payment\"]').click();\n    },\n    configuration: {\n      gatewayMerchantId: window.merchantAccount\n    },\n    showPayButton: true,\n    buttonColor: 'white'\n  },\n  paypal: {\n    environment: window.Configuration.environment,\n    intent: 'capture',\n    onSubmit: (state, component) => {\n      assignPaymentMethodValue();\n      document.querySelector('#adyenStateData').value = JSON.stringify(componentsObj[selectedMethod].stateData);\n      paymentFromComponent(state.data, component);\n    },\n    onCancel: (data, component) => {\n      paymentFromComponent({\n        cancelTransaction: true\n      }, component);\n    },\n    onError: (error, component) => {\n      if (component) {\n        component.setStatus('ready');\n      }\n\n      document.querySelector('#showConfirmationForm').submit();\n    },\n    onAdditionalDetails: state => {\n      document.querySelector('#additionalDetailsHidden').value = JSON.stringify(state.data);\n      document.querySelector('#showConfirmationForm').submit();\n    },\n    onClick: (data, actions) => {\n      $('#dwfrm_billing').trigger('submit');\n\n      if (formErrorsExist) {\n        return actions.reject();\n      }\n    }\n  },\n  mbway: {\n    showPayButton: true,\n    onSubmit: (state, component) => {\n      $('#dwfrm_billing').trigger('submit');\n      assignPaymentMethodValue();\n\n      if (!formErrorsExist) {\n        document.getElementById('component_mbway').querySelector('button').disabled = true;\n        paymentFromComponent(state.data, component);\n        document.querySelector('#adyenStateData').value = JSON.stringify(state.data);\n      }\n    },\n    onError: () =>\n    /* error, component */\n    {\n      document.querySelector('#showConfirmationForm').submit();\n    },\n    onAdditionalDetails: (state\n    /* , component */\n    ) => {\n      document.querySelector('#additionalDetailsHidden').value = JSON.stringify(state.data);\n      document.querySelector('#showConfirmationForm').submit();\n    }\n  },\n  afterpay_default: {\n    visibility: {\n      personalDetails: 'editable',\n      billingAddress: 'hidden',\n      deliveryAddress: 'hidden'\n    },\n    data: {\n      personalDetails: {\n        firstName: document.querySelector('#shippingFirstNamedefault').value,\n        lastName: document.querySelector('#shippingLastNamedefault').value,\n        telephoneNumber: document.querySelector('#shippingPhoneNumberdefault').value,\n        shopperEmail: document.querySelector('#email').value\n      }\n    }\n  },\n  facilypay_3x: {\n    visibility: {\n      personalDetails: 'editable',\n      billingAddress: 'hidden',\n      deliveryAddress: 'hidden'\n    },\n    data: {\n      personalDetails: {\n        firstName: document.querySelector('#shippingFirstNamedefault').value,\n        lastName: document.querySelector('#shippingLastNamedefault').value,\n        telephoneNumber: document.querySelector('#shippingPhoneNumberdefault').value,\n        shopperEmail: document.querySelector('#email').value\n      }\n    }\n  }\n};\n\nif (window.installments) {\n  try {\n    var installments = JSON.parse(window.installments);\n    checkoutConfiguration.paymentMethodsConfiguration.card.installments = installments;\n  } catch (e) {} // eslint-disable-line no-empty\n\n}\n\nif (window.paypalMerchantID !== 'null') {\n  checkoutConfiguration.paymentMethodsConfiguration.paypal.merchantId = window.paypalMerchantID;\n}\n\nif (window.googleMerchantID !== 'null' && window.Configuration.environment === 'live') {\n  checkoutConfiguration.paymentMethodsConfiguration.paywithgoogle.configuration.merchantIdentifier = window.googleMerchantID;\n}\n/**\n * Changes the \"display\" attribute of the selected method from hidden to visible\n */\n\n\nfunction displaySelectedMethod(type) {\n  selectedMethod = type;\n  resetPaymentMethod();\n\n  if (['paypal', 'paywithgoogle', 'mbway'].indexOf(type) > -1) {\n    document.querySelector('button[value=\"submit-payment\"]').disabled = true;\n  } else {\n    document.querySelector('button[value=\"submit-payment\"]').disabled = false;\n  }\n\n  document.querySelector(\"#component_\".concat(type)).setAttribute('style', 'display:block');\n}\n/**\n * To avoid re-rendering components twice, unmounts existing components from payment methods list\n */\n\n\nfunction unmountComponents() {\n  var promises = Object.entries(componentsObj).map(function (_ref) {\n    var [key, val] = _ref;\n    delete componentsObj[key];\n    return resolveUnmount(key, val);\n  });\n  return Promise.all(promises);\n}\n\nfunction resolveUnmount(key, val) {\n  try {\n    return Promise.resolve(val.node.unmount(\"component_\".concat(key)));\n  } catch (e) {\n    // try/catch block for val.unmount\n    return Promise.resolve(false);\n  }\n}\n/**\n * checks if payment method is blocked and returns a boolean accordingly\n */\n\n\nfunction isMethodTypeBlocked(methodType) {\n  var blockedMethods = ['bcmc_mobile_QR', 'applepay', 'cup', 'wechatpay', 'wechatpay_pos', 'wechatpaySdk', 'wechatpayQr'];\n  return blockedMethods.includes(methodType);\n}\n/**\n * Calls getPaymenMethods and then renders the retrieved payment methods (including card component)\n */\n\n\nfunction renderGenericComponent() {\n  return _renderGenericComponent.apply(this, arguments);\n}\n\nfunction _renderGenericComponent() {\n  _renderGenericComponent = _asyncToGenerator(function* () {\n    if (Object.keys(componentsObj).length !== 0) {\n      yield unmountComponents();\n    }\n\n    getPaymentMethods(function (data) {\n      var paymentMethod;\n      var i;\n      checkoutConfiguration.paymentMethodsResponse = data.AdyenPaymentMethods;\n\n      if (data.amount) {\n        checkoutConfiguration.amount = data.amount;\n        checkoutConfiguration.paymentMethodsConfiguration.paypal.amount = data.amount;\n      }\n\n      if (data.countryCode) {\n        checkoutConfiguration.countryCode = data.countryCode;\n      }\n\n      checkout = new AdyenCheckout(checkoutConfiguration);\n      document.querySelector('#paymentMethodsList').innerHTML = '';\n\n      if (data.AdyenPaymentMethods.storedPaymentMethods) {\n        for (i = 0; i < checkout.paymentMethodsResponse.storedPaymentMethods.length; i++) {\n          paymentMethod = checkout.paymentMethodsResponse.storedPaymentMethods[i];\n\n          if (paymentMethod.supportedShopperInteractions.includes('Ecommerce')) {\n            renderPaymentMethod(paymentMethod, true, data.ImagePath);\n          }\n        }\n      }\n\n      data.AdyenPaymentMethods.paymentMethods.forEach((pm, i) => {\n        !isMethodTypeBlocked(pm.type) && renderPaymentMethod(pm, false, data.ImagePath, data.AdyenDescriptions[i].description);\n      });\n\n      if (data.AdyenConnectedTerminals && data.AdyenConnectedTerminals.uniqueTerminalIds && data.AdyenConnectedTerminals.uniqueTerminalIds.length > 0) {\n        var posTerminals = document.querySelector('#adyenPosTerminals');\n\n        while (posTerminals.firstChild) {\n          posTerminals.removeChild(posTerminals.firstChild);\n        }\n\n        addPosTerminals(data.AdyenConnectedTerminals.uniqueTerminalIds);\n      }\n\n      var firstPaymentMethod = document.querySelector('input[type=radio][name=brandCode]');\n      firstPaymentMethod.checked = true;\n      displaySelectedMethod(firstPaymentMethod.value);\n    });\n  });\n  return _renderGenericComponent.apply(this, arguments);\n}\n\nfunction renderPaymentMethod(paymentMethod, storedPaymentMethodBool, path) {\n  var description = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  var node;\n  var paymentMethodsUI = document.querySelector('#paymentMethodsList');\n  var li = document.createElement('li');\n  var paymentMethodID = storedPaymentMethodBool ? \"storedCard\".concat(paymentMethod.id) : paymentMethod.type;\n  var isSchemeNotStored = paymentMethod.type === 'scheme' && !storedPaymentMethodBool;\n  var paymentMethodImage = storedPaymentMethodBool ? \"\".concat(path).concat(paymentMethod.brand, \".png\") : \"\".concat(path).concat(paymentMethod.type, \".png\");\n  var cardImage = \"\".concat(path, \"card.png\");\n  var imagePath = isSchemeNotStored ? cardImage : paymentMethodImage;\n  var label = storedPaymentMethodBool ? \"\".concat(paymentMethod.name, \" \").concat(MASKED_CC_PREFIX).concat(paymentMethod.lastFour) : \"\".concat(paymentMethod.name);\n  var liContents = \"\\n                              <input name=\\\"brandCode\\\" type=\\\"radio\\\" value=\\\"\".concat(paymentMethodID, \"\\\" id=\\\"rb_\").concat(paymentMethodID, \"\\\">\\n                              <img class=\\\"paymentMethod_img\\\" src=\\\"\").concat(imagePath, \"\\\" ></img>\\n                              <label id=\\\"lb_\").concat(paymentMethodID, \"\\\" for=\\\"rb_\").concat(paymentMethodID, \"\\\">\").concat(label, \"</label>\\n                             \");\n\n  if (description) {\n    liContents += \"<p>\".concat(description, \"</p>\");\n  }\n\n  var container = document.createElement('div');\n  li.innerHTML = liContents;\n  li.classList.add('paymentMethod');\n\n  if (storedPaymentMethodBool) {\n    node = checkout.create('card', paymentMethod);\n\n    if (!componentsObj[paymentMethodID]) {\n      componentsObj[paymentMethodID] = {};\n    }\n\n    componentsObj[paymentMethodID].node = node;\n  } else {\n    var fallback = getFallback(paymentMethod.type);\n\n    if (fallback) {\n      var template = document.createElement('template');\n      template.innerHTML = fallback;\n      container.append(template.content);\n    } else {\n      try {\n        node = checkout.create(paymentMethod.type);\n\n        if (!componentsObj[paymentMethodID]) {\n          componentsObj[paymentMethodID] = {};\n        }\n\n        componentsObj[paymentMethodID].node = node;\n      } catch (e) {} // eslint-disable-line no-empty\n\n    }\n  }\n\n  container.classList.add('additionalFields');\n  container.setAttribute('id', \"component_\".concat(paymentMethodID));\n  container.setAttribute('style', 'display:none');\n  li.append(container);\n  paymentMethodsUI.append(li);\n\n  if (paymentMethod.type !== 'paywithgoogle') {\n    node && node.mount(container);\n  } else {\n    node.isAvailable().then(() => {\n      node.mount(container);\n    }).catch(() => {}); // eslint-disable-line no-empty\n  }\n\n  var input = document.querySelector(\"#rb_\".concat(paymentMethodID));\n\n  input.onchange = event => {\n    displaySelectedMethod(event.target.value);\n  };\n\n  if (paymentMethodID === 'giropay') {\n    container.innerHTML = '';\n  }\n\n  if (componentsObj[paymentMethodID] && !container.childNodes[0]) {\n    componentsObj[paymentMethodID].isValid = true;\n  }\n} // eslint-disable-next-line no-unused-vars\n\n\nfunction addPosTerminals(terminals) {\n  var terminalSelect = document.createElement('select');\n  terminalSelect.id = 'terminalList';\n\n  for (var t in terminals) {\n    var option = document.createElement('option');\n    option.value = terminals[t];\n    option.text = terminals[t];\n    terminalSelect.appendChild(option);\n  }\n\n  document.querySelector('#adyenPosTerminals').append(terminalSelect);\n}\n\nfunction resetPaymentMethod() {\n  $('#requiredBrandCode').hide();\n  $('#selectedIssuer').val('');\n  $('#adyenIssuerName').val('');\n  $('#dateOfBirth').val('');\n  $('#telephoneNumber').val('');\n  $('#gender').val('');\n  $('#bankAccountOwnerName').val('');\n  $('#bankAccountNumber').val('');\n  $('#bankLocationId').val('');\n  $('.additionalFields').hide();\n}\n/**\n * Makes an ajax call to the controller function GetPaymentMethods\n */\n\n\nfunction getPaymentMethods(paymentMethods) {\n  $.ajax({\n    url: 'Adyen-GetPaymentMethods',\n    type: 'get',\n    success: function success(data) {\n      paymentMethods(data);\n    }\n  });\n}\n/**\n * Makes an ajax call to the controller function PaymentFromComponent. Used by certain payment methods like paypal\n */\n\n\nfunction paymentFromComponent(data, component) {\n  $.ajax({\n    url: 'Adyen-PaymentFromComponent',\n    type: 'post',\n    data: {\n      data: JSON.stringify(data),\n      paymentMethod: document.querySelector('#adyenPaymentMethodName').value\n    },\n    success: function success(data) {\n      if (data.orderNo) {\n        document.querySelector('#merchantReference').value = data.orderNo;\n      }\n\n      if (data.orderToken) {\n        document.querySelector('#orderToken').value = data.orderToken;\n      }\n\n      if (data.fullResponse && data.fullResponse.action) {\n        component.handleAction(data.fullResponse.action);\n      } else {\n        document.querySelector('#showConfirmationForm').submit();\n      }\n    }\n  }).fail(function () {});\n} // Submit the payment\n\n\n$('button[value=\"submit-payment\"]').on('click', function () {\n  if (document.querySelector('#selectedPaymentOption').value === 'AdyenPOS') {\n    document.querySelector('#terminalId').value = document.querySelector('#terminalList').value;\n    return true;\n  }\n\n  assignPaymentMethodValue();\n  validateComponents();\n  return showValidation();\n});\n\nfunction assignPaymentMethodValue() {\n  var adyenPaymentMethod = document.querySelector('#adyenPaymentMethodName');\n  adyenPaymentMethod.value = document.querySelector(\"#lb_\".concat(selectedMethod)).innerHTML;\n}\n\nfunction showValidation() {\n  var input;\n\n  if (componentsObj[selectedMethod] && !componentsObj[selectedMethod].isValid) {\n    componentsObj[selectedMethod].node.showValidation();\n    return false;\n  }\n\n  if (selectedMethod === 'ach') {\n    var inputs = document.querySelectorAll('#component_ach > input');\n    inputs = Object.values(inputs).filter(function (input) {\n      return !(input.value && input.value.length > 0);\n    });\n\n    for (input of inputs) {\n      input.classList.add('adyen-checkout__input--error');\n    }\n\n    if (inputs.length > 0) {\n      return false;\n    }\n\n    return true;\n  }\n\n  if (selectedMethod === 'ratepay') {\n    input = document.querySelector('#dateOfBirthInput');\n\n    if (!(input.value && input.value.length > 0)) {\n      input.classList.add('adyen-checkout__input--error');\n      return false;\n    }\n\n    return true;\n  }\n\n  return true;\n}\n\nfunction validateCustomInputField(input) {\n  if (input.value === '') {\n    input.classList.add('adyen-checkout__input--error');\n  } else if (input.value.length > 0) {\n    input.classList.remove('adyen-checkout__input--error');\n  }\n}\n/**\n * Assigns stateData value to the hidden stateData input field so it's sent to the backend for processing\n */\n\n\nfunction validateComponents() {\n  if (document.querySelector('#component_ach')) {\n    var inputs = document.querySelectorAll('#component_ach > input');\n\n    for (var input of inputs) {\n      input.onchange = function () {\n        validateCustomInputField(this);\n      };\n    }\n  }\n\n  if (document.querySelector('#dateOfBirthInput')) {\n    document.querySelector('#dateOfBirthInput').onchange = function () {\n      validateCustomInputField(this);\n    };\n  }\n\n  var stateData;\n\n  if (componentsObj[selectedMethod] && componentsObj[selectedMethod].stateData) {\n    stateData = componentsObj[selectedMethod].stateData;\n  } else {\n    stateData = {\n      paymentMethod: {\n        type: selectedMethod\n      }\n    };\n  }\n\n  if (selectedMethod === 'ach') {\n    var bankAccount = {\n      ownerName: document.querySelector('#bankAccountOwnerNameValue').value,\n      bankAccountNumber: document.querySelector('#bankAccountNumberValue').value,\n      bankLocationId: document.querySelector('#bankLocationIdValue').value\n    };\n    stateData.paymentMethod = _objectSpread(_objectSpread({}, stateData.paymentMethod), {}, {\n      bankAccount: bankAccount\n    });\n  } else if (selectedMethod === 'ratepay') {\n    if (document.querySelector('#genderInput').value && document.querySelector('#dateOfBirthInput').value) {\n      stateData.shopperName = {\n        gender: document.querySelector('#genderInput').value\n      };\n      stateData.dateOfBirth = document.querySelector('#dateOfBirthInput').value;\n    }\n  }\n\n  document.querySelector('#adyenStateData').value = JSON.stringify(stateData);\n}\n/**\n * Contains fallback components for payment methods that don't have an Adyen web component yet\n */\n\n\nfunction getFallback(paymentMethod) {\n  var ach = \"<div id=\\\"component_ach\\\">\\n                    <span class=\\\"adyen-checkout__label\\\">Bank Account Owner Name</span>\\n                    <input type=\\\"text\\\" id=\\\"bankAccountOwnerNameValue\\\" class=\\\"adyen-checkout__input\\\">\\n                    <span class=\\\"adyen-checkout__label\\\">Bank Account Number</span>\\n                    <input type=\\\"text\\\" id=\\\"bankAccountNumberValue\\\" class=\\\"adyen-checkout__input\\\" maxlength=\\\"17\\\" >\\n                    <span class=\\\"adyen-checkout__label\\\">Routing Number</span>\\n                    <input type=\\\"text\\\" id=\\\"bankLocationIdValue\\\" class=\\\"adyen-checkout__input\\\" maxlength=\\\"9\\\" >\\n                 </div>\";\n  var ratepay = \"<span class=\\\"adyen-checkout__label\\\">Gender</span>\\n                    <select id=\\\"genderInput\\\" class=\\\"adyen-checkout__input\\\">\\n                        <option value=\\\"MALE\\\">Male</option>\\n                        <option value=\\\"FEMALE\\\">Female</option>\\n                    </select>\\n                    <span class=\\\"adyen-checkout__label\\\">Date of birth</span>\\n                    <input id=\\\"dateOfBirthInput\\\" class=\\\"adyen-checkout__input\\\" type=\\\"date\\\"/>\";\n  var fallback = {\n    ach: ach,\n    ratepay: ratepay\n  };\n  return fallback[paymentMethod];\n}\n\nmodule.exports = {\n  methods: {\n    renderGenericComponent: renderGenericComponent\n  }\n};\n\n//# sourceURL=webpack:///./cartridges/int_adyen_SFRA/cartridge/client/default/js/adyenCheckout.js?");

/***/ })

/******/ });